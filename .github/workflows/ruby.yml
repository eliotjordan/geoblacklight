name: CI

on:
  push:
    branches:
      - main
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7
    - name: Install dependencies
      run: bundle install
    - name: Run linter
      run: bundle exec standardrb

  aardvark-fixture-linter:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7
    - name: Install json schema validator
      run: gem install json_schemer
    - name: Run json_schemer against aarkvark fixtures
      run: find spec/fixtures/solr_documents -type f -name "*.json" | xargs json_schemer schema/geoblacklight-schema-aardvark.json

  build-demo-app:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3
    - name: Install dependencies
      run: bundle install
      env:
        RAILS_VERSION: 7.1.3
    - name: Setup Yarn
      run: exec "yarnpkg"
    - name: Build
      run: BRANCH=${{ github.head_ref || github.ref_name }} rails new build-${{ github.event.number }} -m template.rb
    - name: Copy Dockerfile
      run: cp lib/generators/geoblacklight/templates/Dockerfile build-${{ github.event.number }}/.
    - name: Copy compose.yml
      run: cp lib/generators/geoblacklight/templates/compose.yml build-${{ github.event.number }}/.
    - name: Add docker image to compose.yml
      run: sed -i 's/<gbl>/ghcr.io\/eliotjordan\/geoblacklight:pr-${{ github.event.number }}/g'  build-${{ github.event.number }}/compose.yml
    - name: Cleanup
      run: rm -rf build-${{ github.event.number }}/node_modules build-${{ github.event.number }}/Gemfile.lock build-${{ github.event.number }}/yarn.lock build-${{ github.event.number }}/tmp
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
      env:
        DOCKER_METADATA_PR_HEAD_SHA: true
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      id: build-push-step
      with:
        context: "${{ github.workspace }}/build-${{ github.event.number }}"
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        file: "${{ github.workspace }}/build-${{ github.event.number }}/Dockerfile"
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      id: artifact-upload-step
      if: always()
      with:
        name: build-${{ github.event.number }}
        path: build-${{ github.event.number }}/
    - name: Add artifact link to PR comments
      uses: mshick/add-pr-comment@v2
      with:
        message: |
          Demo app download link: ${{ steps.artifact-upload-step.outputs.artifact-url }}

          1. Download demo app and unzip file
          2. Change into app directory
              - run `docker compose pull`
              - run `docker compose up`
          3. Visit http://localhost:3000


  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby_version: ['3.3']
        rails_version: [7.1.3]

    name: test ruby ${{ matrix.ruby_version }} / rails ${{ matrix.rails_version }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby_version }}
    - name: Create Solr container
      run: docker run -d -p 8983:8983 geoblacklight/solr:8.9-v1.0.0 server/scripts/ci-start.sh
    - name: Install dependencies
      run: bundle install
      env:
        RAILS_VERSION: ${{ matrix.rails_version }}
    - name: Setup Yarn
      run: exec "yarnpkg"
    - name: Load config into solr
      run: |
          cd solr/conf
          zip -1 -r solr_config.zip ./*
          curl -H "Content-type:application/octet-stream" --data-binary @solr_config.zip "http://solr:SolrRocks@127.0.0.1:8983/solr/admin/configs?action=UPLOAD&name=blacklight"
          curl -H 'Content-type: application/json' http://solr:SolrRocks@127.0.0.1:8983/api/collections/  -d '{create: {name: blacklight-core, config: blacklight, numShards: 1}}'
    - name: Run tests
      run: bundle exec rake ci
      env:
        RAILS_VERSION: ${{ matrix.rails_version }}
        ENGINE_CART_RAILS_OPTIONS: '--skip-git --skip-listen --skip-spring --skip-keeps --skip-action-cable --skip-coffee --skip-test --skip-webpack-install --skip-javascript'
        SOLR_URL: http://solr:SolrRocks@localhost:8983/solr/blacklight-core
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: coverage
        path: coverage/
