name: Build Demo App

on:
  push:
    branches:
      - main
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-app:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3
    - name: Install dependencies
      run: bundle install
      env:
        RAILS_VERSION: 7.1.3
    - name: Setup Yarn
      run: exec "yarnpkg"
    - name: Build
      run: BRANCH=${{ github.head_ref || github.ref_name }} rails new build -m template.rb
    - name: Copy Dockerfile
      run: cp lib/generators/geoblacklight/templates/Dockerfile build/.
    - name: Copy compose.yml
      run: cp lib/generators/geoblacklight/templates/compose.yml build/.
    - name: Add docker image to compose.yml
      run: sed -i 's/<gbl>/ghcr.io\/eliotjordan\/geoblacklight:pr-${{ github.event.number }}/g'  build/compose.yml
    - name: Cleanup
      run: rm -rf build/node_modules build/Gemfile.lock build/yarn.lock build/tmp
    - name: Upload app
      uses: actions/upload-artifact@v4
      with:
        name: app-${{ github.event.number }}
        path: build/
        if-no-files-found: error
        retention-days: 1

  build-docker:
    runs-on: ubuntu-latest
    needs:
      - build-app
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64
    steps:
      - name: Download app
        uses: actions/download-artifact@v4
        with:
          name: app-${{ github.event.number }}
      - name: Display structure of downloaded files
        run: ls -la

      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      #     tags: |
      #       type=ref,event=branch
      #       type=ref,event=pr
      #       type=sha
      #   env:
      #     DOCKER_METADATA_PR_HEAD_SHA: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: "${{ github.workspace }}/build-${{ github.event.number }}"
          platforms: ${{ matrix.platform }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: "${{ github.workspace }}/build-${{ github.event.number }}/Dockerfile"
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build-docker
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
        env:
          DOCKER_METADATA_PR_HEAD_SHA: true

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

  # artifacts:
      # permissions:
      #   contents: read
      #   packages: write
      #   pull-requests: write
  #   steps:
  #     - name: Upload coverage artifacts
  #       uses: actions/upload-artifact@v4
  #       id: artifact-upload-step
  #       if: always()
  #       with:
  #         name: build
  #         path: build/
  #     - name: Add artifact link to PR comments
  #       uses: mshick/add-pr-comment@v2
  #       with:
  #         message: |
  #           Demo app download link: ${{ steps.artifact-upload-step.outputs.artifact-url }}
  #
  #           1. Download demo app and unzip file
  #           2. Change into app directory
  #               - run `docker compose pull`
  #               - run `docker compose up`
  #           3. Visit http://localhost:3000
